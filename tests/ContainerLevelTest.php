<?php

namespace NAWebCo\BoxPackerTest;

use NAWebCo\BoxPacker\Container;
use PHPUnit\Framework\TestCase;

use NAWebCo\BoxPacker\Solid;
use NAWebCo\BoxPacker\ContainerLevel;

class ContainerLevelTest extends TestCase
{

    /**
     * @expectedException \InvalidArgumentException
     */
    public function testConstructWithInvalidDimensions()
    {
        new ContainerLevel(3, 0);
    }

    /**
     * @param $sWidth
     * @param $sLength
     * @param $cWidth
     * @param $cLength
     * @param $expectedDimensions
     * @dataProvider calculateNewOpenAreasWithValidDimensionsData
     */
    public function testCalculateNewOpenAreasWithValidDimensions($sWidth, $sLength, $cWidth, $cLength, $expectedDimensions)
    {
        $solid = new Solid($sWidth, $sLength);
        $containerSpace = new Solid($cWidth, $cLength);
        $level = new ContainerLevel(5, 5 ); // These dimensions don't matter for this test.

        $expectedSolids = [];
        foreach ($expectedDimensions as $expectSolidDimensions) {
            $expectedSolids[] = new Solid($expectSolidDimensions[0], $expectSolidDimensions[1]);
        }

        $this->assertEquals($expectedSolids, $level->calculateNewSpaces($solid, $containerSpace));
    }

    public function calculateNewOpenAreasWithValidDimensionsData()
    {
        return [
            [1, 1, 2, 2, [[2, 1], [1, 1]]],
            [2, 1, 2, 2, [[2, 1]]],
            [2, 2, 2, 2, []],
        ];
    }

    /**
     * @expectedException \InvalidArgumentException
     */
    public function testCalculateNewOpenAreasWithInvalidDimensions()
    {
        $solid = new Solid(3, 1);
        $containerSolid = new Solid(2, 2, 1);
        $level = new ContainerLevel(5,5 ); // These dimensions don't matter for this test.

        $level->calculateNewSpaces($solid, $containerSolid);
    }

    public function getContentsMaxHeight()
    {
        $container = new ContainerLevel(5, 1);
        $container->addSolid(new Solid(1, 1, 1));
        $container->addSolid(new Solid(1, 1, 3));
        $container->addSolid(new Solid(1, 1, 2));

        $this->assertEquals(2, $container->getContentsMaxHeight());
    }

    public function testAddToSubcontainers()
    {
        $level = new ContainerLevel(4, 4);

        // This one goes into a space (not a container)
        $this->assertTrue($level->addSolid(new Solid(4, 3, 2)));

        // This one won't fit into remaining spaces, triggers ContainerLevel::initContainers
        $this->assertFalse($level->addSolid(new Solid(4, 3, 2)));

        // This one should fit into the level's container (generated by ContainerLevel::initContainers)
        $this->assertTrue($level->addSolid(new Solid(4, 1, 1)));

        // This should also fit into the level's container
        $this->assertTrue($level->addSolid(new Solid(4, 1, 1)));

        // This one won't fit into the level's container, which is now full
        $this->assertFalse($level->addSolid(new Solid(4, 1, 1)));
    }

    public function testGetContentsCountSimple()
    {
        $iterations = 5;
        for ($expectedCount = 0; $expectedCount < $iterations; $expectedCount++) {
            $level = new ContainerLevel(4, 4);

            for ($i = 0; $i < $expectedCount; $i++) {
                $level->addSolid(new Solid(1, 1, 1));
            }
            $this->assertEquals($expectedCount, $level->getContentsCount());
        }
    }

    public function testGetMultiLevelContentsCount()
    {
        $level = new ContainerLevel(4, 4);

        $level->addSolid(new Solid(4, 3, 2, 'box1'));
        $level->addSolid(new Solid(4, 1, 1, 'box2'));
        $level->addSolid(new Solid(4, 1, 1, 'box3'));

        $this->assertEquals(3, $level->getContentsCount());
    }

    public function testGetPackedSolids()
    {
        $level = new ContainerLevel(4, 4);

        $level->addSolid(new Solid(4, 3, 2));
        $level->addSolid(new Solid(4, 1, 1));
        $level->addSolid(new Solid(4, 1, 1));
        $level->addSolid(new Solid(4, 1, 1));

        $this->assertCount(4, $level->getPackedSolids());
    }

}