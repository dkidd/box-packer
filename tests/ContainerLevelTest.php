<?php

namespace NAWebCo\BoxPackerTest;

use NAWebCo\BoxPacker\Container;
use PHPUnit\Framework\TestCase;

use NAWebCo\BoxPacker\Solid;
use NAWebCo\BoxPacker\ContainerLevel;

class ContainerLevelTest extends TestCase
{

    /**
     * @expectedException \InvalidArgumentException
     */
    public function testConstructWithInvalidDimensions()
    {
        new ContainerLevel(3, 0);
    }

    public function getContentsMaxHeight()
    {
        $container = new ContainerLevel(5, 1);
        $container->addSolid(new Solid(1, 1, 1));
        $container->addSolid(new Solid(1, 1, 3));
        $container->addSolid(new Solid(1, 1, 2));

        $this->assertEquals(2, $container->getContentsMaxHeight());
    }

    public function testAddToSubcontainers()
    {
        $level = new ContainerLevel(4, 4);

        // This one goes into a space (not a container)
        $this->assertTrue($level->addSolid(new Solid(4, 3, 2, 'solid 1')));

        // This one won't fit into remaining spaces, triggers ContainerLevel::initContainers
        $this->assertFalse($level->addSolid(new Solid(4, 3, 2, 'solid 2')));

        // This one should fit into the level's container (generated by ContainerLevel::initContainers)
        $this->assertTrue($level->addSolid(new Solid(4, 1, 1, 'solid 3')));

        // This should also fit into the level's container
        $this->assertTrue($level->addSolid(new Solid(4, 1, 1, 'solid 4')));

        // This one won't fit into the level's container, which is now full
        $this->assertFalse($level->addSolid(new Solid(4, 1, 1, 'solid 5')));
    }

    public function testGetContentsCountSimple()
    {
        $level = new ContainerLevel(4, 4);
        $level->addSolid(new Solid(1, 1, 1));
        $level->addSolid(new Solid(1, 1, 1));
        $level->addSolid(new Solid(1, 1, 1));

        $this->assertEquals(3, $level->getContentsCount());
    }

    public function testGetMultiLevelContentsCount()
    {
        $level = new ContainerLevel(4, 4);

        $level->addSolid(new Solid(4, 3, 2, 'box1'));
        $level->addSolid(new Solid(4, 1, 1, 'box2'));
        $level->addSolid(new Solid(4, 1, 1, 'box3'));

        $this->assertEquals(3, $level->getContentsCount());
    }

    public function testGetPackedSolids()
    {
        $level = new ContainerLevel(4, 4);

        $level->addSolid(new Solid(4, 3, 2));
        $level->addSolid(new Solid(4, 1, 1));
        $level->addSolid(new Solid(4, 1, 1));

        // Shouldn't fit
        $level->addSolid(new Solid(4, 1, 1));

        $this->assertCount(3, $level->getContents());
    }

}